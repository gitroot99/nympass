#!/bin/bash

# You can set default directory for Password
# e.g. passpath='/Users/yourname/Dropbox/nympassdata/'
passpath=''

# Set Network Interface Name of your System for Encryption
# e.g. passkey=eth0..n (For Linux Users)
# e.g. passkey=en0..n (For OS X Users)
passkey=en4

timeout=5 #Second to clean Clipboard

getmac() {
	ifconfig $passkey | grep -Eo ..\(\:..\){5}
}

createpass() {
	if [ -z "$1" ]; then
		encpass "$(pwd)"
	elif [ "$1" = "-d" ]; then
		encpass "$passpath"
	elif [ -d $1 ]; then
		encpass $1
	else
		echo "$1 is not a Directory. Try Again."
	fi
}

encpass() {
	read -p "Name Pass : " passname
	read -p "Account ID : " acctid
	read -s -p "Enter Passphrase : " passphrase
	echo ""
	if [ -f "$1/$passname" ]; then
		echo "$passname file already exists in $1"
		read -p "Do you want to overwrite? [y/N] : " response
		case $response in
			[yY][eE][sS]|[yY])
				echo "$acctid [$passname]:$passphrase" | openssl enc -aes-256-cbc -a -salt -pass pass:$(getmac) | openssl enc -aes-256-cbc -salt -out "$1/$passname"
				echo "$passname is created in $1."
				;;
			*)
				Echo "$passname file is not overwritten."
				;;
		esac
	else
		echo "$acctid [$passname]:$passphrase" | openssl enc -aes-256-cbc -a -salt -pass pass:$(getmac) | openssl enc -aes-256-cbc -salt -out "$1/$passname"
		echo "$passname is created in $1."
	fi
}

chpass() {
	passdata=`openssl enc -aes-256-cbc -d -salt -pass pass:"$2" -in $1`
	if [ "$?" -eq "0" ]; then
		echo "$passdata" | openssl enc -aes-256-cbc -salt -pass pass:"$3" -out $1
		echo "Master Password for $1 has been changed!"
	else
		echo "Wrong Master Password for $1! Try Again."
	fi
}

changepass() {
	read -s -p "Enter Current Master Password : " oldpassphrase
	echo ""
	read -s -p "Enter New Master Password : " newpassphrase
	echo ""
	read -s -p "Verify New Master Password : " vfypassphrase
	echo ""
	if [ $newpassphrase == $vfypassphrase ]; then
		if [ -z "$1" ]; then
			for file in "$passpath/"*
			do
				chpass $file $oldpassphrase $newpassphrase
			done
		elif [ -f "$1" ]; then
			chpass $1 $oldpassphrase $newpassphrase
		elif [ -d "$1" ]; then
			for file in "$1/"*
			do
				chpass $file $oldpassphrase $newpassphrase
			done
		elif [ -f "$passpath/$1" ]; then
			chpass "$passpath/$1" $oldpassphrase $newpassphrase
		else
			echo "There's no Password file."
		fi
	else
		echo "Password does not Match. Try Again."
	fi
}

clearbg() {
	if [[ -x `which pbcopy` ]]; then
		sleep $timeout
		echo "" | pbcopy
	else
		sleep $timeout
		echo "" | xclip -sel clip
	fi
}

decpass() {
	if [[ -x `which pbcopy` ]]; then
		passdata=`openssl enc -aes-256-cbc -d -salt -in $1 | openssl enc -aes-256-cbc -a -d -salt -pass pass:$(getmac)`
		echo "Account ID : $(echo $passdata | awk -F ":" '{print $1}')"
		echo $passdata | awk -F ":" '{print $2}' | tr -d '\n' | pbcopy
		clearbg &
	else
		passdata=`openssl enc -aes-256-cbc -d -salt -in $1 | openssl enc -aes-256-cbc -a -d -salt -pass pass:$(getmac)`
		echo "Account ID : $(echo $passdata | awk -F ":" '{print $1}')"
		echo $passdata | awk -F ":" '{print $2}' | tr -d '\n' | xclip -sel clip
		clearbg &
	fi
}

getpass() {
	if [ -f "$1" ]; then
		decpass $1
	else
		if [ -f "$passpath/$(basename $1)" ]; then
			decpass "$passpath/$(basename $1)"
		else
			echo "File not found!"
		fi
	fi
}

usage() {
	echo "Usage : $0 [-h|--help] [create] [change password_directory] [get password_file_path]"
	echo "  -h | --help : Help. Display this message and quit."
	echo "  create      : Create Password File."
	echo "  change      : Change Master Password."
	echo "  get         : Get Password from Password File."
	exit
}

if [ -z "$1" ]; then
	createpass
else
	case "$1" in
		create)
			createpass $2
			;;
		get)
			getpass $2
			;;
		change)
			changepass $2
			;;
		-h|--help)
			usage
			;;
		*)
			usage
			;;
	esac
fi
